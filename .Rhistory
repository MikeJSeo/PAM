library("shiny")
install.packages("shiny")
library(shiny)
runGitHub("PAM", "MikeJSeo")
install.package("openxlsx")
install.packages("openxlsx")
library(shiny)
runGitHub("PAM", "MikeJSeo")
install.packages(c("pamr", "matrixStats", "superpc", "shiny", "openxlsx"))
source("http://bioconductor.org/biocLite.R")
biocLite("impute")
install.packages(c("pamr", "matrixStats", "superpc", "shiny",
install.packages(c("pamr", "matrixStats", "superpc", "shiny", "openxlsx"))
source("http://bioconductor.org/biocLite.R")
biocLite("impute")
library(shiny)
runGitHub("PAM", "MikeJSeo")
setwd("C:/Users/mike/Desktop")
read.csv("MASTER_PAM_TRAIN.csv")
data = read.csv("MASTER_PAM_TRAIN.csv")
View(data)
library(pamr)
khan.data <- pamr.from.excel("khan.txt", 65, sample.labels=TRUE)
khan.data <- pamr.from.excel("khan.txt", 65, sample.labels=TRUE)
help(pamr.train)
pamr.train(data)
x = as.matrix(data[c(-1,-2), c(-1,-2)])
x
View(x)
setwd("C:/Users/mike/Desktop")
data = read.csv("MASTER_PAM_TRAIN.csv", header = F)
View(data)
x = as.matrix(data[c(-1,-2), c(-1,-2)])
x = as.matrix(data[c(-1,-2), c(-1,-2)])
y = as.matrix(data[2,c(-1,-2)])
y = factor(y)
x
View(x)
class(x) = "numeric"
y = as.matrix(data[2,c(-1,-2)])
y = factor(y)
View(x)
y
geneid = dat[c(-1,-2),1]
geneid = data[c(-1,-2),1]
genenames = data[c(-1,-2),2]
geneid
genenames = data[c(-1,-2),2]
genenames
data2 = list(x = x, y, = y, geneid = geneid, genenames = genenames)
data2 = list(x = x, y, = y, geneid = geneid, genenames = genenames)
data2 = list(x = x, y = y, geneid = geneid, genenames = genenames)
data2
str(data2)
pamr.train(data)
pamr.train(data2)
help(pamr.plotTestError)
pamr.plotTestError
testdata =  read.csv("MASTER_PAM_TEST2.csv", header = F)
test_x = as.matrix(testdata[c(-1,-2), c(-1,-2)])
test_x
test_x = as.numeric(as.matrix(testdata[c(-1,-2), c(-1,-2)]))
test_x
pamr.predict(fit, test_x, threshold = threshold[i], type = "class")
fit = pamr.train(data2)
pamr.predict(fit, test_x, threshold = threshold[i], type = "class")
pamr.predict(fit, test_x, threshold =1, type = "class")
dim(x)
dim(test_x)
test_x
class(test_x) = "numeric"
test_x = as.matrix(testdata[c(-1,-2), c(-1,-2)])
class(test_x) = "numeric"
View(test_x)
pamr.predict(fit, test_x, threshold = 1, type = "class")
pamr.plotTestError = function(fit, testData){
x = testData$x
y = testData$y
par(cex = 0.7)
threshold = fit$threshold
ylength = sum(!is.na(y))
errorrate = vector(mode = "logical", length = ylength)
for(i in 1: length(threshold)){
predict = pamr.predict(fit, x, threshold = threshold[i], type = "class")
errorrate[i] = sum(y != predict, na.rm = TRUE) / ylength
}
plot(fit$threshold, errorrate, ylim = c(0, 0.9), xlab = "Threshold", ylab = "Test Error", col = 4)
axis(3, at = fit$threshold, labels = fit$nonzero)
}
test_y = as.matrix(testdata[2,c(-1,-2)])
test_y = factor(test_y)
test_y
pamr.plotTestError = function(fit, testData){
x = testData$x
y = testData$y
par(cex = 0.7)
threshold = fit$threshold
ylength = sum(!is.na(y))
errorrate = vector(mode = "logical", length = ylength)
for(i in 1: length(threshold)){
predict = pamr.predict(fit, x, threshold = threshold[i], type = "class")
errorrate[i] = sum(y != predict, na.rm = TRUE) / ylength
}
plot(fit$threshold, errorrate, ylim = c(0, 0.9), xlab = "Threshold", ylab = "Test Error", col = 4)
axis(3, at = fit$threshold, labels = fit$nonzero)
}
testData = list(test_x = test_x, test_y = test_y)
pamr.predict(fit, test_x, threshold = 1, type = "class")
pamr.plotTestError(fit, testData )
testData
str(testDaeta)
str(testData)
testdata =  read.csv("MASTER_PAM_TEST2.csv", header = F)
test_x = as.matrix(testdata[c(-1,-2), c(-1,-2)])
class(test_x) = "numeric"
test_y = as.matrix(testdata[2,c(-1,-2)])
test_y = factor(test_y)
testData = list(test_x = test_x, test_y = test_y)
pamr.predict(fit, test_x, threshold = 1, type = "class")
pamr.plotTestError(fit, testData )
threshold = 0.1
ylength = sum(!is.na(y))
errorrate = vector(mode = "logical", length = ylength)
for(i in 1: length(threshold)){
predict = pamr.predict(fit, x, threshold = threshold[i], type = "class")
errorrate[i] = sum(y != predict, na.rm = TRUE) / ylength
}
plot(fit$threshold, errorrate, ylim = c(0, 0.9), xlab = "Threshold", ylab = "Test Error", col = 4)
fit$threshold
errorrate
ylength = sum(!is.na(test_y))
ylength
test_y
y
fit$threshold
errorrate
test_y
y
errorrate = vector(mode = "logical", length = ylength)
for(i in 1: length(threshold)){
predict = pamr.predict(fit, x, threshold = threshold[i], type = "class")
errorrate[i] = sum(y != predict, na.rm = TRUE) / ylength
}
errorrate
errorrate = vector(mode = "logical", length = ylength)
for(i in 1: length(threshold)){
predict = pamr.predict(fit, x, threshold = 0.1, type = "class")
errorrate[i] = sum(y != predict, na.rm = TRUE) / ylength
}
errorrate
threshold
errorrate = vector(mode = "logical", length = ylength)
for(i in 1: length(fit$threshold)){
predict = pamr.predict(fit, x, threshold = 0.1, type = "class")
errorrate[i] = sum(y != predict, na.rm = TRUE) / ylength
}
errorrate
predict = pamr.predict(fit, test_x, threshold = 0.1, type = "class")
predict
errorrate[i] = sum(y != predict, na.rm = TRUE) / ylength
plot(fit$threshold, errorrate, ylim = c(0, 0.9), xlab = "Threshold", ylab = "Test Error", col = 4)
predict
errorrate[i] = sum(test_y != predict, na.rm = TRUE) / ylength
for(i in 1: length(fit$threshold)){
predict = pamr.predict(fit, test_x, threshold = 0.1, type = "class")
errorrate[i] = sum(test_y != predict, na.rm = TRUE) / ylength
}
test_y
predict = pamr.predict(fit, test_x, threshold = 0.1, type = "class")
predict
test_y
test_y != predict
length(test_y)
length(predict)
testdata =  read.csv("MASTER_PAM_TEST2.csv", header = F)
test_x = as.matrix(testdata[c(-1,-2), c(-1,-2)])
class(test_x) = "numeric"
test_y = as.matrix(testdata[2,c(-1,-2)])
test_y = factor(test_y)
test_y != predict
y
predict = pamr.predict(fit, test_x, threshold = 0.1, type = "class")
errorrate[i] = sum(test_y != predict, na.rm = TRUE) / ylength
predict
errorrate
predict
test_y != predict
test_y
test_y = as.matrix(testdata[2,c(-1,-2)])
test_y = factor(test_y)
test_y
test_y != predict
test_y = as.matrix(testdata[2,c(-1,-2)])
test_y = factor(test_y)
test_y != predict
testdata =  read.csv("MASTER_PAM_TEST2.csv", header = F)
test_x = as.matrix(testdata[c(-1,-2), c(-1,-2)])
class(test_x) = "numeric"
test_y = as.matrix(testdata[2,c(-1,-2)])
test_y = factor(test_y)
test_y != predict
test_y
predict = pamr.predict(fit, test_x, threshold = 0.1, type = "class")
predict
est_y != predict
test_y != predict
x = testData$x
y = testData$y
par(cex = 0.7)
threshold = 0.1
ylength = sum(!is.na(test_y))
errorrate = vector(mode = "logical", length = ylength)
for(i in 1: length(fit$threshold)){
predict = pamr.predict(fit, test_x, threshold = 0.1, type = "class")
errorrate[i] = sum(test_y != predict, na.rm = TRUE) / ylength
}
plot(fit$threshold, errorrate, ylim = c(0, 0.9), xlab = "Threshold", ylab = "Test Error", col = 4)
fit$threshold
errorrate
ylength
pamr.plotTestError = function(fit, testData){
x = testData$x
y = testData$y
par(cex = 0.7)
threshold = fit$threshold
ylength = sum(!is.na(y))
errorrate = vector(mode = "logical", length = length(threshold))
for(i in 1: length(threshold)){
predict = pamr.predict(fit, x, threshold = threshold[i], type = "class")
errorrate[i] = sum(y != predict, na.rm = TRUE) / ylength
}
plot(fit$threshold, errorrate, ylim = c(0, 0.9), xlab = "Threshold", ylab = "Test Error", col = 4)
axis(3, at = fit$threshold, labels = fit$nonzero)
}
pamr.plotTestError(fit, testData)
library(shiny)
runGitHub("PAM", "MikeJSeo")
remove(list = ls())
library(shiny)
runGitHub("PAM", "MikeJSeo")
setwd("C:/Users/mike/Desktop")
data = read.csv("MASTER_PAM_TRAIN.csv", header = F)
library(pamr)
pamr.train(data)
x = as.matrix(data[c(-1,-2), c(-1,-2)])
class(x) = "numeric"
y = as.matrix(data[2,c(-1,-2)])
y = factor(y)
geneid = data[c(-1,-2),1]
genenames = data[c(-1,-2),2]
data2 = list(x = x, y = y, geneid = geneid, genenames = genenames)
fit = pamr.train(data2)
testdata =  read.csv("MASTER_PAM_TEST2.csv", header = F)
test_x = as.matrix(testdata[c(-1,-2), c(-1,-2)])
class(test_x) = "numeric"
test_y = as.matrix(testdata[2,c(-1,-2)])
test_y = factor(test_y)
x = testData$x
testData = list(test_x = test_x, test_y = test_y)
x = testData$x
y = testData$y
par(cex = 0.7)
threshold = fit$threshold
ylength = sum(!is.na(y))
sum(!is.na(y))
y
x = testdata$x
y = testdata$y
x
y
x = testdata$test_x
y = testdata$test_y
par(cex = 0.7)
threshold = fit$threshold
ylength = sum(!is.na(y))
x = testdata$test_x
y = testdata$test_y
x
y
x = testData$test_x
y = testData$test_y
x
y
par(cex = 0.7)
threshold = fit$threshold
ylength = sum(!is.na(y))
ylength
errorrate = vector(mode = "logical", length = length(threshold))
errorrate
for(i in 1: length(threshold)){
predict = pamr.predict(fit, x, threshold = threshold[i], type = "class")
errorrate[i] = sum(y != predict, na.rm = TRUE) / ylength
}
errorrate
plot(fit$threshold, errorrate, ylim = c(0, 0.9), xlab = "Threshold", ylab = "Test Error", col = 4)
axis(3, at = fit$threshold, labels = fit$nonzero)
library(shiny)
runGitHub("PAM", "MikeJSeo")
library(shiny)
runGitHub("PAM", "MikeJSeo")
library(shiny)
install.pacakages("shiny")
install.packages("shiny")
install.packages("shiny")
library("shiny")
shiny::runApp('PAM')
shiny::runApp('PAM')
setwd("C:/Users/mike/Desktop")
data = read.csv("MASTER_PAM_TRAIN.csv", header = F)
library(pamr)
pamr.train(data)
x = as.matrix(data[c(-1,-2), c(-1,-2)])
class(x) = "numeric"
y = as.matrix(data[2,c(-1,-2)])
y = factor(y)
geneid = data[c(-1,-2),1]
genenames = data[c(-1,-2),2]
data2 = list(x = x, y = y, geneid = geneid, genenames = genenames)
fit = pamr.train(data2)
testdata =  read.csv("MASTER_PAM_TEST2.csv", header = F)
test_x = as.matrix(testdata[c(-1,-2), c(-1,-2)])
class(test_x) = "numeric"
test_y = as.matrix(testdata[2,c(-1,-2)])
test_y = factor(test_y)
testData = list(test_x = test_x, test_y = test_y)
setwd("C:/Users/mike/Desktop")
data = read.csv("MASTER_PAM_TRAIN.csv", header = F)
library(pamr)
x = as.matrix(data[c(-1,-2), c(-1,-2)])
class(x) = "numeric"
y = as.matrix(data[2,c(-1,-2)])
y = factor(y)
geneid = data[c(-1,-2),1]
genenames = data[c(-1,-2),2]
data2 = list(x = x, y = y, geneid = geneid, genenames = genenames)
fit = pamr.train(data2)
fit
testdata =  read.csv("MASTER_PAM_TEST2.csv", header = F)
test_x = as.matrix(testdata[c(-1,-2), c(-1,-2)])
class(test_x) = "numeric"
test_y = as.matrix(testdata[2,c(-1,-2)])
test_y = factor(test_y)
testData = list(test_x = test_x, test_y = test_y)
pamr.predict(fit, test_x, threshold = 1, type = "class")
pamr.plotTestError(fit, testData)
pamr.plotTestError = function(fit, testData){
x = testData$x
y = testData$y
par(cex = 0.7)
threshold = fit$threshold
ylength = sum(!is.na(test_y))
errorrate = vector(mode = "logical", length = length(threshold))
for(i in 1: length(fit$threshold)){
predict = pamr.predict(fit, test_x, threshold = 0.1, type = "class")
errorrate[i] = sum(test_y != predict, na.rm = TRUE) / ylength
}
plot(fit$threshold, errorrate, ylim = c(0, 0.9), xlab = "Threshold", ylab = "Test Error", col = 4)
axis(3, at = fit$threshold, labels = fit$nonzero)
}
pamr.plotTestError(fit, testData)
shiny::runApp('PAM')
pamr.predict(fit, test_x, threshold = 1, type = "class")
shiny::runApp('PAM')
shiny::runApp('PAM')
shiny::runApp('PAM')
shiny::runApp('PAM')
fit
fit$threshold
error_rate
errorrate
plot(fit$threshold, errorrate, ylim = c(0, 0.9), xlab = "Threshold", ylab = "Test Error", col = 4)
pamr.plotTestError = function(fit, testData){
x = testData$x
y = testData$y
par(cex = 0.7)
threshold = fit$threshold
ylength = sum(!is.na(y))
errorrate = vector(mode = "logical", length = length(threshold))
for(i in 1: length(threshold)){
predict = pamr.predict(fit, x, threshold = threshold[i], type = "class")
errorrate[i] = sum(y != predict, na.rm = TRUE) / ylength
}
plot(fit$threshold, errorrate, ylim = c(0, 0.9), xlab = "Threshold", ylab = "Test Error", col = 4)
axis(3, at = fit$threshold, labels = fit$nonzero)
}
remove(list = ls(0))
remove(list = ls())
pamr.plotTestError = function(fit, testData){
x = testData$x
y = testData$y
par(cex = 0.7)
threshold = fit$threshold
ylength = sum(!is.na(y))
errorrate = vector(mode = "logical", length = length(threshold))
for(i in 1: length(threshold)){
predict = pamr.predict(fit, x, threshold = threshold[i], type = "class")
errorrate[i] = sum(y != predict, na.rm = TRUE) / ylength
}
plot(fit$threshold, errorrate, ylim = c(0, 0.9), xlab = "Threshold", ylab = "Test Error", col = 4)
axis(3, at = fit$threshold, labels = fit$nonzero)
}
setwd("C:/Users/mike/Desktop")
data = read.csv("MASTER_PAM_TRAIN.csv", header = F)
library(pamr)
x = as.matrix(data[c(-1,-2), c(-1,-2)])
class(x) = "numeric"
y = as.matrix(data[2,c(-1,-2)])
y = factor(y)
geneid = data[c(-1,-2),1]
genenames = data[c(-1,-2),2]
data2 = list(x = x, y = y, geneid = geneid, genenames = genenames)
fit = pamr.train(data2)
testdata =  read.csv("MASTER_PAM_TEST2.csv", header = F)
test_x = as.matrix(testdata[c(-1,-2), c(-1,-2)])
class(test_x) = "numeric"
test_y = as.matrix(testdata[2,c(-1,-2)])
test_y = factor(test_y)
testData = list(x = test_x, y = test_y)
pamr.plotTestError(fit, testData)
remove(list = ls())
library("shiny")
}
shiny::runApp('PAM')
shiny::runApp()
shiny::runApp()
shiny::runApp()
runGitHub("PAM", MikeJSeo)
runGitHub("PAM", "MikeJSeo")
runGitHub("PAM", MikeJSeo)
runGitHub("PAM", "MikeJSeo")
shiny::runApp()
